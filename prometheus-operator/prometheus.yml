apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: prometheus
  labels:
    app: prometheus
  annotations:
    openshift.io/display-name: "Kafka prometheus install"
  name: prometheus
  labels:
    app: prometheus
  annotations:
    openshift.io/display-name: "Kafka prometheus install"
    openshift.io/provider-display-name: "Red Hat, Inc."
    description: "."
    tags: "kafka,prometheus,prometheus-operator,monitoring"
    iconClass: "icon-rh-integration"
    version: "1.0"
message: |-
  prometheus is now deployed to ${NAMESPACE}
parameters:
- name: NAMESPACE
  displayName: Namespace
  value: kafka-1
  required: true
  description: Namespace in which the prometheus is installed.
- name: CPU_REQUEST
  displayName: CPU request
  value: '100m'
  required: true
  description: The amount of CPU to request for each container.
- name: MEMORY_REQUEST
  displayName: Memory request
  value: '2Gi'
  required: true
  description: The amount of memory required for each container to run.
- name: CPU_LIMIT
  displayName: CPU limit
  value: '200m'
  required: true
  description: The amount of CPU each container is limited to use.
- name: MEMORY_LIMIT
  displayName: Memory limit
  value: '4Gi'
  required: true
  description: The amount of memory each container is limited to use.
- name: CONTAINER_PORT
  displayName: Memory limit
  value: '8080'
  required: true
  description: The amount of memory each container is limited to use.
- name: PROMETHEUS_MEMORY
  displayName: Prometheus Memory Limit
  value: '2Gi'
- name: PROMETHEUS_SERVICE_PORT
  displayName: Prometheus Service Port
  value: '9090'
- name: PORT_NAME
  displayName: Port Name
  value: 'metrics'
  required: true
- name: KAFKA_SERVICE_TEAM
  displayName: Kafka Service team label
  value: 'aims'
  requited: true


objects:
#
# OpenShift resources
#

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: prometheus
    namespace: ${NAMESPACE}

- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    namespace: ${NAMESPACE}
    name: prometheus
  rules:
  - apiGroups: [""]
    resources:
    - nodes
    - nodes/proxy
    - services
    - endpoints
    - pods
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources:
    - configmaps
    verbs: ["get"]

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: RoleBinding
  metadata:
    name: prometheus
    namespace: ${NAMESPACE}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: prometheus
  subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: ${NAMESPACE}

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: prometheus
  rules:
  - apiGroups:
    - ''
    resources:
    - nodes
    - nodes/proxy
    - services
    - endpoints
    - pods
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - extensions
    - ""
    resources:
    - ingresses
    - configmaps
    resources:
    - ingresses
    verbs:
    - get
    - list
    - watch
  - nonResourceURLs:
    - '/metrics'
    verbs:
    - get

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: prometheus
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: prometheus
  subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: ${NAMESPACE}

# Disabled a we need cluster wide access to fetch metrics

# - apiVersion: rbac.authorization.k8s.io/v1
#   kind: Role
#   metadata:
#     namespace: ${NAMESPACE}
#     name: prometheus
#   rules:
#   - apiGroups: [""]
#     resources:
#     - nodes
#     - nodes/proxy
#     - services
#     - endpoints
#     - pods
#     verbs: ["get", "list", "watch"]
#   - apiGroups: [""]
#     resources:
#     - configmaps
#     verbs: ["get"]
#
# - apiVersion: rbac.authorization.k8s.io/v1beta1
#   kind: RoleBinding
#   metadata:
#     name: prometheus
#     namespace: ${NAMESPACE}
#   roleRef:
#     apiGroup: rbac.authorization.k8s.io
#     kind: Role
#     name: prometheus
#   subjects:
#   - kind: ServiceAccount
#     name: prometheus
#     namespace: ${NAMESPACE}

- apiVersion: monitoring.coreos.com/v1
  kind: Alertmanager
  metadata:
    name: alertmanager
    namespace: ${NAMESPACE}
    spec:
      # baseImage: containers.cisco.com/jaganaga/alertmanager
      replicas: 3
      serviceAccountName: prometheus
      version: v0.16.1
      # imagePullSecrets:
      #   - name: cisco-cred-pull-secret

# oc create secret generic alertmanager-alertmanager --from-file=alertmanager.yaml

- apiVersion: monitoring.coreos.com/v1
  kind: Prometheus
  metadata:
    name: prometheus
    namespace: ${NAMESPACE}
  spec:
    # baseImage: containers.cisco.com/jaganaga/prometheus
    securityContext: {}
    serviceAccountName: prometheus
    serviceMonitorSelector:
      matchLabels:
        team: ${KAFKA_SERVICE_TEAM}
    resources:
      requests:
        memory: ${MEMORY_REQUEST}
        cpu: ${CPU_REQUEST}
      limits:
        cpu: ${CPU_LIMIT}
        memory: ${MEMORY_LIMIT}
    alerting:
      alertmanagers:
      - namespace: kafka-1
        name: alertmanager-operated
        port: web
    ruleSelector:
      matchLabels:
        team: ${KAFKA_SERVICE_TEAM}
    additionalScrapeConfigs:
      name: additional-scrape-configs
      key: prometheus-additional.yml

- apiVersion: v1
  kind: Service
  metadata:
    name: prometheus
    namespace: ${NAMESPACE}
  spec:
    type: NodePort
    ports:
    - name: ${PORT_NAME}
      port: ${PROMETHEUS_SERVICE_PORT}
      protocol: TCP
      targetPort: ${PORT_NAME}
    selector:
      prometheus: prometheus

- apiVersion: v1
  kind: Route
  metadata:
    name: prometheus
    namespace: ${NAMESPACE}
  spec:
    to:
      kind: Service
      name: prometheus
